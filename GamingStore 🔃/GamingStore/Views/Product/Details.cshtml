@model Product
@using Microsoft.AspNetCore.Identity
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Product Details - " + Model.Name;
}

<div class="container mt-4">
    <!-- Back button -->
    <a href="@Url.Action("Index", "Product")" class="btn btn-secondary mb-4">
        <i class="fas fa-arrow-left"></i> Back to Products
    </a>

    <div class="row g-4">
        <!-- Left Column - Images -->
        <div class="col-lg-6">
            <div class="card mb-4 bg-dark border-secondary product-gallery">
                <div class="card-body p-3">
                    @if (Model.Images != null && Model.Images.Any())
                    {
                        <!-- Main Image -->
                        <div class="text-center mb-3">
                            <img id="mainProductImage" src="@Model.Images.First().ImageUrl" alt="@Model.Name"
                                 class="img-fluid rounded product-image-main">
                        </div>

                        <!-- Thumbnail Navigation -->
                        <div class="d-flex flex-wrap gap-2 justify-content-center">
                            @foreach (var image in Model.Images)
                            {
                                <img src="@image.ImageUrl" alt="@Model.Name"
                                     class="img-thumbnail cursor-pointer @(image == Model.Images.First() ? "border-primary active-thumb" : "border-secondary")"
                                     onclick="changeMainImage('@image.ImageUrl', this)">
                            }
                        </div>
                    }
                    else
                    {
                        <div class="text-center">
                            <img src="/img/placeholder.png" class="img-fluid rounded product-image-main" alt="No image available">
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column - Product Info -->
        <div class="col-lg-6">
            <div class="card bg-dark border-secondary mb-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            @if (Model.IsFeatured)
                            {
                                <span class="badge bg-warning text-dark mb-2">Featured</span>
                            }
                            <h1 class="h2 mb-0">@Model.Name</h1>
                        </div>
                    </div>

                    <!-- Rating Section -->
                    <div class="mb-3">
                        <div class="d-flex align-items-center">
                            @{
                                double averageRating = ViewBag.AverageRating ?? 0;
                                int fullStars = (int)averageRating;
                                bool hasHalfStar = averageRating - fullStars >= 0.5;
                                int totalRatings = Model.Ratings?.Count ?? 0;
                            }
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= fullStars)
                                {
                                    <i class="fas fa-star text-warning"></i>
                                }
                                else if (i == fullStars + 1 && hasHalfStar)
                                {
                                    <i class="fas fa-star-half-alt text-warning"></i>
                                }
                                else
                                {
                                    <i class="far fa-star text-warning"></i>
                                }
                            }
                            <span class="ms-2 text-muted">(@totalRatings @(totalRatings == 1 ? "rating" : "ratings"))</span>
                        </div>
                    </div>

                    <!-- Price Section -->
                    <div class="mb-4">
                        @if (Model.IsOnSale && Model.DiscountPercentage.HasValue)
                        {
                            <div class="d-flex align-items-center">
                                <span class="text-decoration-line-through text-muted me-2">@Model.Price.ToString("C")</span>
                                <span class="fw-bold text-success fs-4 me-2">
                                    @((Model.Price * (100 - Model.DiscountPercentage.Value) / 100).ToString("C"))
                                </span>
                                <span class="badge bg-success">@Model.DiscountPercentage% OFF</span>
                            </div>
                        }
                        else
                        {
                            <p class="fw-bold fs-4 mb-0">@Model.Price.ToString("C")</p>
                        }
                    </div>

                    <!-- Stock Status -->
                    <div class="mb-4">
                        <span class="badge @(Model.Stock > 0 ? "bg-success" : "bg-danger") me-2">
                            @(Model.Stock > 0 ? "In Stock" : "Out of Stock")
                        </span>
                        <span class="text-muted">@Model.Stock available</span>
                    </div>

                    <!-- Favorite Button - Moved to this location -->
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <div class="mb-4">
                            <form asp-action="ToggleFavorite" asp-route-productId="@Model.Id" method="post">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn @(ViewBag.IsFavorited ? "btn-danger" : "btn-outline-danger") btn-sm">
                                    <i class="fas fa-heart me-2"></i>
                                    @(ViewBag.IsFavorited ? "Remove from Favorites" : "Add to Favorites")
                                </button>
                            </form>
                        </div>
                    }

                    <!-- Description -->
                    <div class="mb-4">
                        <h5 class="border-bottom pb-2 mb-3 border-secondary">Description</h5>
                        <p class="text-muted">@Model.Description</p>
                    </div>

                    <!-- Category -->
                    <div class="mb-4">
                        <h5 class="border-bottom pb-2 mb-3 border-secondary">Details</h5>
                        <div class="row">
                            <div class="col-md-6">
                                <p class="mb-2"><strong>Category:</strong> <span class="text-muted">@Model.Category</span></p>
                            </div>
                            <div class="col-md-6">
                                <p class="mb-2"><strong>Last Updated:</strong> <span class="text-muted">@Model.LastUpdated.ToString("MMMM dd, yyyy")</span></p>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @(Model.Stock <= 0 ? "disabled" : "")>
                            <i class="fas fa-cart-plus me-2"></i> Add to Cart
                        </button>
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <button class="btn btn-outline-secondary text-white" data-bs-toggle="modal" data-bs-target="#ratingModal">
                                <i class="fas fa-star me-2"></i> Rate Product
                            </button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Comments Section (Renamed from Customer Reviews) -->
    <div class="card bg-dark border-secondary mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h5 class="mb-0">Comments</h5>
                @if (SignInManager.IsSignedIn(User))
                {
                    <button class="btn btn-sm btn-primary" data-bs-toggle="collapse" data-bs-target="#commentForm">
                        <i class="fas fa-plus me-2"></i>Add Comment
                    </button>
                }
            </div>

            <!-- Comment Form (Collapsible) -->
            @if (SignInManager.IsSignedIn(User))
            {
                <div class="collapse mb-4" id="commentForm">
                    <form asp-action="AddComment" method="post" class="bg-dark p-3 rounded">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <div class="mb-3">
                            <label for="content" class="form-label">Your Comment</label>
                            <textarea class="form-control bg-dark text-light" id="content" name="content" rows="3" required
                                      placeholder="Share your thoughts about this product..."></textarea>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-outline-secondary me-2" data-bs-toggle="collapse" data-bs-target="#commentForm">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">Post Comment</button>
                        </div>
                    </form>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <a href="/Account/Login" class="alert-link">Sign in</a> to leave a comment.
                </div>
            }

            <!-- Comments List -->
            @if (Model.Comments?.Any() == true)
            {
                <div class="comments-list">
                    @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <div class="comment-item mb-4 pb-3 border-bottom border-secondary">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <div class="d-flex align-items-center">
                                    <div class="avatar bg-secondary rounded-circle me-3 d-flex align-items-center justify-content-center"
                                         style="width: 40px; height: 40px;">
                                        <span class="text-light">@comment.User.UserName[0]</span>
                                    </div>
                                    <div>
                                        <strong>@comment.User.UserName</strong>
                                        <div class="text-muted small">@comment.CreatedAt.ToString("MMMM dd, yyyy 'at' h:mm tt")</div>
                                    </div>
                                </div>
                                @if (SignInManager.IsSignedIn(User) && User.Identity.Name == comment.User.UserName)
                                {
                                    <form asp-action="DeleteComment" asp-route-id="@comment.Id" method="post">
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-sm btn-outline-danger" title="Delete comment">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </form>
                                }
                            </div>
                            <p class="mb-0">@comment.Content</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-4">
                    <i class="far fa-comments fa-3x text-muted mb-3"></i>
                    <p class="text-muted">No comments yet. Be the first to comment!</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Rating Modal -->
@if (SignInManager.IsSignedIn(User))
{
    <div class="modal fade" id="ratingModal" tabindex="-1" aria-labelledby="ratingModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-dark">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title" id="ratingModalLabel">Rate this product</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form asp-action="AddRating" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="productId" value="@Model.Id" />
                    <div class="modal-body">
                        <div class="text-center mb-3">
                            <p class="mb-4">How would you rate this product?</p>
                            <div class="rating-stars mb-3">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="far fa-star fa-2x star-rating" data-value="@i"></i>
                                }
                                <input type="hidden" id="ratingValue" name="value" value="0" required />
                            </div>
                            <div id="ratingText" class="text-muted">Select a rating</div>
                        </div>
                    </div>
                    <div class="modal-footer border-secondary">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Submit Rating</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@section Styles {
    <style>
        /* Product Gallery */
        .product-gallery {
            position: sticky;
            top: 20px;
        }

        .product-image-main {
            max-height: 400px;
            width: 100%;
            object-fit: contain;
            border-radius: 8px;
        }

        /* Thumbnails */
        .img-thumbnail {
            background-color: #2c3034;
            border-width: 2px;
            height: 80px;
            width: 80px;
            object-fit: cover;
            transition: all 0.2s ease;
        }

            .img-thumbnail:hover {
                transform: scale(1.05);
                border-color: var(--bs-primary) !important;
            }

            .img-thumbnail.active-thumb {
                border-color: var(--bs-primary) !important;
                box-shadow: 0 0 0 2px rgba(var(--bs-primary-rgb), 0.25);
            }

        /* Comments Section */
        .comment-item {
            padding-bottom: 1rem;
        }

            .comment-item:last-child {
                border-bottom: none !important;
                padding-bottom: 0;
            }

        .avatar {
            font-weight: bold;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Rating Stars */
        .rating-stars {
            font-size: 2rem;
            line-height: 2rem;
            margin-bottom: 1rem;
        }

        .star-rating {
            cursor: pointer;
            margin: 0 5px;
            color: #6c757d;
            transition: color 0.2s;
        }

            .star-rating:hover,
            .star-rating.active {
                color: #ffc107;
            }

        /* Card styling */
        .card {
            border-width: 1px;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        /* Button enhancements */
        .btn-outline-danger:hover {
            color: white;
        }
    </style>
}

@section Scripts {
    <script>
        // Change main product image
        function changeMainImage(src, element) {
            document.getElementById('mainProductImage').src = src;
            document.querySelectorAll('.img-thumbnail').forEach(t => {
                t.classList.remove('active-thumb', 'border-primary');
                t.classList.add('border-secondary');
            });
            element.classList.add('active-thumb', 'border-primary');
            element.classList.remove('border-secondary');
        }

        // Star rating interaction
        document.querySelectorAll('.star-rating').forEach(star => {
            star.addEventListener('click', function() {
                const value = this.getAttribute('data-value');
                document.getElementById('ratingValue').value = value;

                // Update star display
                document.querySelectorAll('.star-rating').forEach(s => {
                    s.classList.remove('fas', 'active');
                    s.classList.add('far');
                    if (s.getAttribute('data-value') <= value) {
                        s.classList.remove('far');
                        s.classList.add('fas', 'active');
                    }
                });

                // Update rating text
                const ratingText = document.getElementById('ratingText');
                const ratings = {
                    1: "Poor",
                    2: "Fair",
                    3: "Good",
                    4: "Very Good",
                    5: "Excellent"
                };
                ratingText.textContent = ratings[value];
                ratingText.className = 'fw-bold';
                ratingText.classList.add(
                    value <= 2 ? 'text-danger' :
                    value == 3 ? 'text-warning' : 'text-success'
                );
            });

            // Add hover effect
            star.addEventListener('mouseover', function() {
                const value = this.getAttribute('data-value');
                document.querySelectorAll('.star-rating').forEach(s => {
                    if (s.getAttribute('data-value') <= value) {
                        s.classList.add('text-warning');
                    }
                });
            });

            star.addEventListener('mouseout', function() {
                document.querySelectorAll('.star-rating').forEach(s => {
                    s.classList.remove('text-warning');
                });
            });
        });

        // Show comment form if there's an error
        @if (TempData["ErrorMessage"] != null)
        {
            <text>
                document.addEventListener('DOMContentLoaded', function() {
                    var commentForm = document.getElementById('commentForm');
                    if (commentForm) {
                        var bsCollapse = new bootstrap.Collapse(commentForm, { toggle: true });
                    }
                });
            </text>
        }
    </script>
}